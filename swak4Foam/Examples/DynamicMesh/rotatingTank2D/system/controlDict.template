/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

<!--(if (foamFork=="openfoamplus" and foamVersion>(1800,)) or (foamFork=="openfoam" and foamVersion>(5,99)))-->
application     interFoam;
<!--(else)-->
application     interDyMFoam;
<!--(end)-->

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         40;

deltaT          0.01;

writeControl    adjustableRunTime;

writeInterval   0.05;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression yes;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;
maxAlphaCo      0.5;

maxDeltaT       1;

libs (
    "libswakDynamicMesh.so"
);

functions
{
    probes
    {
        type            probes;
        libs ("libsampling.so");
        writeControl    writeTime;
        outputControl timeStep;
        outputInterval 1;
        probeLocations
        (
            (0 9.95 19.77)
            (0 -9.95 19.77)
        );
        fixedLocations  false;
        fields
        (
            p
        );
    }

    wallPressure
    {
        type            surfaces;
        libs ("libsampling.so");
        writeControl    writeTime;
        outputControl timeStep;
        outputInterval 10;
        surfaceFormat   raw;
        fields
        (
            p
        );
        interpolationScheme cellPoint;

        surfaces
        (
            walls
            {
                type        patch;
                patches     (walls);
                patchName walls;
                triangulate false;
            }
        );
    }
}


// ************************************************************************* //
