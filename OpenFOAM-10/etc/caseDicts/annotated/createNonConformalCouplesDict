/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      createNonConformalCouplesDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Each couple has its own entry in this file. Entries take the following form:

/*
// Unique name used to generate the name of the coupled patches
<name>
{
    // Name of the two patches between which to create the coupling
    patches     (<patch1> <patch2>);

    // Type of the transformation; "none", "rotational", or "translational"
    transform   <transformType>;

    // Additional transformation settings (if any)
    ...
}
*/


// Examples:

// Create a non-conformal couple with no transformation
nonConformalCouple_none
{
    patches         (nonCouple1 nonCouple2);
    transform       none;
}

// Create a non-conformal couple with a 30 degree rotational transformation
nonConformalCouple_30deg
{
    patches         (nonCoupleBehind nonCoupleAhead);
    transform       rotational;
    rotationAxis    (-1 0 0);
    rotationCentre  (0 0 0);
    rotationAngle   30;
}

// Create a non-conformal couple with a 2 metre translational transformation
nonConformalCouple_2m
{
    patches         (nonCoupleBack nonCoupleFront);
    transform       translational;
    separation      (0 2 0);
}


// Note that in rare cases it may be appropriate to create multiple couplings
// between the same two patches. That can be achieved with multiple entries
// with the same patches specified. See the
// incompressible/pimpleFoam/RAS/impeller tutorial for an example of this.


// ************************************************************************* //
